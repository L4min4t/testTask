@model EditFilmCategoriesModel


@if (Model != null)
{
    <form id="film-form" asp-controller="Film" asp-action="EditFilmCategories" method="post">
        <input type="hidden" asp-for="Id" />
        
        <div class="form-group">
            <label for="@Model.FilmCategories" class="fs-5">Edit categories</label>
            <span id="category-validation-error" class="text-danger" style="display: none;">Please select at least one category.</span>
            <div id="category-checkboxes">
                <div id="loading-spinner" style="display: none;">
                    <i class="fa fa-spinner fa-spin"></i> Loading Categories...
                </div>
            </div>
            <span asp-validation-for="FilmCategories" class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary" id="submit-button">Update</button>
    </form>

    <script>
    document.getElementById('loading-spinner').style.display = 'block';
    
    var filmCategories = @Html.Raw(Json.Serialize(Model == null ? new List<int>() : Model.FilmCategories));
    
    fetch('/api/CategoryApi')
        .then(response => response.json())
        .then(categories => {
            const categoryCheckboxes = document.getElementById('category-checkboxes');
            categories.forEach(category => {
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = 'FilmCategories';
                checkbox.value = category.id;
                checkbox.id = 'category-' + category.id;
                checkbox.checked = filmCategories.includes(category.id);
    
                const label = document.createElement('label');
                label.htmlFor = 'category-' + category.id;
                label.appendChild(document.createTextNode(category.name));
    
                categoryCheckboxes.appendChild(checkbox);
                categoryCheckboxes.appendChild(label);
                categoryCheckboxes.appendChild(document.createElement('br'));
            });
            
            document.getElementById('loading-spinner').style.display = 'none';
            
            checkSelectedCategories(categories);
        })
        .catch(error => {
            console.error('Error fetching categories:', error);
            document.getElementById('loading-spinner').style.display = 'none';
        });

    function checkSelectedCategories(categories) {
        const checkboxes = document.querySelectorAll('input[name="FilmCategories"]');
        const submitButton = document.getElementById('submit-button');
        const validationError = document.getElementById('category-validation-error');

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const atLeastOneChecked = [...checkboxes].some(checkbox => checkbox.checked);
                submitButton.disabled = !atLeastOneChecked;
                if (!atLeastOneChecked) {
                    document.getElementById('category-validation-error').style.display = 'block';
                } else {
                    document.getElementById('category-validation-error').style.display = 'none';
                }
            });
        });
    }
</script>
}
else
{
    <div class="alert alert-warning mt-3" role="alert">
        The source that you are trying to access doesn't exist or has been removed.
    </div>
}